-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Arith/Par.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pExp -> Exp                                 (0)
	Exp -> 'true'                                      (1)
	Exp -> 'false'                                     (2)
	Exp -> 'if' Exp 'then' Exp 'else' Exp              (3)
	Exp -> '0'                                         (4)
	Exp -> 'succ' Exp                                  (5)
	Exp -> 'pred' Exp                                  (6)
	Exp -> 'iszero' Exp                                (7)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'0'            { PT _ (TS _ 1) }
	'else'         { PT _ (TS _ 2) }
	'false'        { PT _ (TS _ 3) }
	'if'           { PT _ (TS _ 4) }
	'iszero'       { PT _ (TS _ 5) }
	'pred'         { PT _ (TS _ 6) }
	'succ'         { PT _ (TS _ 7) }
	'then'         { PT _ (TS _ 8) }
	'true'         { PT _ (TS _ 9) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pExp     rule  0
	Exp             rules 1, 2, 3, 4, 5, 6, 7

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pExp -> . Exp                                (rule 0)

	'0'            shift, and enter state 4
	'false'        shift, and enter state 5
	'if'           shift, and enter state 6
	'iszero'       shift, and enter state 7
	'pred'         shift, and enter state 8
	'succ'         shift, and enter state 9
	'true'         shift, and enter state 2

	Exp            goto state 3

State 1

	Exp -> . 'true'                                     (rule 1)

	'true'         shift, and enter state 2


State 2

	Exp -> 'true' .                                     (rule 1)

	'else'         reduce using rule 1
	'then'         reduce using rule 1
	%eof           reduce using rule 1


State 3

	%start_pExp -> Exp .                                (rule 0)

	%eof           accept


State 4

	Exp -> '0' .                                        (rule 4)

	'else'         reduce using rule 4
	'then'         reduce using rule 4
	%eof           reduce using rule 4


State 5

	Exp -> 'false' .                                    (rule 2)

	'else'         reduce using rule 2
	'then'         reduce using rule 2
	%eof           reduce using rule 2


State 6

	Exp -> 'if' . Exp 'then' Exp 'else' Exp             (rule 3)

	'0'            shift, and enter state 4
	'false'        shift, and enter state 5
	'if'           shift, and enter state 6
	'iszero'       shift, and enter state 7
	'pred'         shift, and enter state 8
	'succ'         shift, and enter state 9
	'true'         shift, and enter state 2

	Exp            goto state 13

State 7

	Exp -> 'iszero' . Exp                               (rule 7)

	'0'            shift, and enter state 4
	'false'        shift, and enter state 5
	'if'           shift, and enter state 6
	'iszero'       shift, and enter state 7
	'pred'         shift, and enter state 8
	'succ'         shift, and enter state 9
	'true'         shift, and enter state 2

	Exp            goto state 12

State 8

	Exp -> 'pred' . Exp                                 (rule 6)

	'0'            shift, and enter state 4
	'false'        shift, and enter state 5
	'if'           shift, and enter state 6
	'iszero'       shift, and enter state 7
	'pred'         shift, and enter state 8
	'succ'         shift, and enter state 9
	'true'         shift, and enter state 2

	Exp            goto state 11

State 9

	Exp -> 'succ' . Exp                                 (rule 5)

	'0'            shift, and enter state 4
	'false'        shift, and enter state 5
	'if'           shift, and enter state 6
	'iszero'       shift, and enter state 7
	'pred'         shift, and enter state 8
	'succ'         shift, and enter state 9
	'true'         shift, and enter state 2

	Exp            goto state 10

State 10

	Exp -> 'succ' Exp .                                 (rule 5)

	'else'         reduce using rule 5
	'then'         reduce using rule 5
	%eof           reduce using rule 5


State 11

	Exp -> 'pred' Exp .                                 (rule 6)

	'else'         reduce using rule 6
	'then'         reduce using rule 6
	%eof           reduce using rule 6


State 12

	Exp -> 'iszero' Exp .                               (rule 7)

	'else'         reduce using rule 7
	'then'         reduce using rule 7
	%eof           reduce using rule 7


State 13

	Exp -> 'if' Exp . 'then' Exp 'else' Exp             (rule 3)

	'then'         shift, and enter state 14


State 14

	Exp -> 'if' Exp 'then' . Exp 'else' Exp             (rule 3)

	'0'            shift, and enter state 4
	'false'        shift, and enter state 5
	'if'           shift, and enter state 6
	'iszero'       shift, and enter state 7
	'pred'         shift, and enter state 8
	'succ'         shift, and enter state 9
	'true'         shift, and enter state 2

	Exp            goto state 15

State 15

	Exp -> 'if' Exp 'then' Exp . 'else' Exp             (rule 3)

	'else'         shift, and enter state 16


State 16

	Exp -> 'if' Exp 'then' Exp 'else' . Exp             (rule 3)

	'0'            shift, and enter state 4
	'false'        shift, and enter state 5
	'if'           shift, and enter state 6
	'iszero'       shift, and enter state 7
	'pred'         shift, and enter state 8
	'succ'         shift, and enter state 9
	'true'         shift, and enter state 2

	Exp            goto state 17

State 17

	Exp -> 'if' Exp 'then' Exp 'else' Exp .             (rule 3)

	'else'         reduce using rule 3
	'then'         reduce using rule 3
	%eof           reduce using rule 3


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 8
Number of terminals: 9
Number of non-terminals: 2
Number of states: 18
