-- Haskell module generated by the BNF converter

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Arith.Skel where

import qualified Arith.Abs
import           Prelude   (Either (..), Show, String, show, ($), (++))

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transExp :: Arith.Abs.Exp -> Result
transExp x = case x of
  Arith.Abs.ETrue                -> failure x
  Arith.Abs.EFalse               -> failure x
  Arith.Abs.ECond exp1 exp2 exp3 -> failure x
  Arith.Abs.EZero                -> failure x
  Arith.Abs.ESucc exp            -> failure x
  Arith.Abs.EPred exp            -> failure x
  Arith.Abs.EIsZero exp          -> failure x
