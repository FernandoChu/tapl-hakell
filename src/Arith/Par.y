-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module Arith.Par
  ( happyError
  , myLexer
  , pExp
  ) where

import Prelude

import qualified Arith.Abs
import Arith.Lex

}

%name pExp Exp
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '0'      { PT _ (TS _ 1) }
  'else'   { PT _ (TS _ 2) }
  'false'  { PT _ (TS _ 3) }
  'if'     { PT _ (TS _ 4) }
  'iszero' { PT _ (TS _ 5) }
  'pred'   { PT _ (TS _ 6) }
  'succ'   { PT _ (TS _ 7) }
  'then'   { PT _ (TS _ 8) }
  'true'   { PT _ (TS _ 9) }

%%


Exp :: { Arith.Abs.Exp }
Exp
  : 'true' { Arith.Abs.ETrue }
  | 'false' { Arith.Abs.EFalse }
  | 'if' Exp 'then' Exp 'else' Exp { Arith.Abs.ECond $2 $4 $6 }
  | '0' { Arith.Abs.EZero }
  | 'succ' Exp { Arith.Abs.ESucc $2 }
  | 'pred' Exp { Arith.Abs.EPred $2 }
  | 'iszero' Exp { Arith.Abs.EIsZero $2 }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

