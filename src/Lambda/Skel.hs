-- Haskell module generated by the BNF converter

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Lambda.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Lambda.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Lambda.Abs.Ident -> Result
transIdent x = case x of
  Lambda.Abs.Ident string -> failure x

transTerm :: Lambda.Abs.Term -> Result
transTerm x = case x of
  Lambda.Abs.TmVar ident -> failure x
  Lambda.Abs.TmAbs ident term -> failure x
  Lambda.Abs.TmApp term1 term2 -> failure x
