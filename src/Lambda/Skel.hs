-- Haskell module generated by the BNF converter

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Lambda.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Lambda.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transExp :: Lambda.Abs.Exp -> Result
transExp x = case x of
  Lambda.Abs.ETrue -> failure x
  Lambda.Abs.EFalse -> failure x
  Lambda.Abs.ECond exp1 exp2 exp3 -> failure x
  Lambda.Abs.EZero -> failure x
  Lambda.Abs.ESucc exp -> failure x
  Lambda.Abs.EPred exp -> failure x
