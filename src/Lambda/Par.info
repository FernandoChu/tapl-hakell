-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Lambda/Par.y
-----------------------------------------------------------------------------

state 7 contains 2 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pTerm -> Term                               (0)
	Ident -> L_Ident                                   (1)
	Term -> Ident                                      (2)
	Term -> '(' 'lambda' Ident '.' Term ')'            (3)
	Term -> Term Term                                  (4)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	'.'            { PT _ (TS _ 3) }
	'lambda'       { PT _ (TS _ 4) }
	L_Ident        { PT _ (TV $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pTerm    rule  0
	Ident           rule  1
	Term            rules 2, 3, 4

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pTerm -> . Term                              (rule 0)

	'('            shift, and enter state 5
	L_Ident        shift, and enter state 2

	Ident          goto state 3
	Term           goto state 4

State 1

	Ident -> . L_Ident                                  (rule 1)

	L_Ident        shift, and enter state 2


State 2

	Ident -> L_Ident .                                  (rule 1)

	'('            reduce using rule 1
	')'            reduce using rule 1
	'.'            reduce using rule 1
	L_Ident        reduce using rule 1
	%eof           reduce using rule 1


State 3

	Term -> Ident .                                     (rule 2)

	'('            reduce using rule 2
	')'            reduce using rule 2
	L_Ident        reduce using rule 2
	%eof           reduce using rule 2


State 4

	%start_pTerm -> Term .                              (rule 0)
	Term -> Term . Term                                 (rule 4)

	'('            shift, and enter state 5
	L_Ident        shift, and enter state 2
	%eof           accept

	Ident          goto state 3
	Term           goto state 7

State 5

	Term -> '(' . 'lambda' Ident '.' Term ')'           (rule 3)

	'lambda'       shift, and enter state 6


State 6

	Term -> '(' 'lambda' . Ident '.' Term ')'           (rule 3)

	L_Ident        shift, and enter state 2

	Ident          goto state 8

State 7

	Term -> Term . Term                                 (rule 4)
	Term -> Term Term .                                 (rule 4)

	'('            shift, and enter state 5
			(reduce using rule 4)

	')'            reduce using rule 4
	L_Ident        shift, and enter state 2
			(reduce using rule 4)

	%eof           reduce using rule 4

	Ident          goto state 3
	Term           goto state 7

State 8

	Term -> '(' 'lambda' Ident . '.' Term ')'           (rule 3)

	'.'            shift, and enter state 9


State 9

	Term -> '(' 'lambda' Ident '.' . Term ')'           (rule 3)

	'('            shift, and enter state 5
	L_Ident        shift, and enter state 2

	Ident          goto state 3
	Term           goto state 10

State 10

	Term -> '(' 'lambda' Ident '.' Term . ')'           (rule 3)
	Term -> Term . Term                                 (rule 4)

	'('            shift, and enter state 5
	')'            shift, and enter state 11
	L_Ident        shift, and enter state 2

	Ident          goto state 3
	Term           goto state 7

State 11

	Term -> '(' 'lambda' Ident '.' Term ')' .           (rule 3)

	'('            reduce using rule 3
	')'            reduce using rule 3
	L_Ident        reduce using rule 3
	%eof           reduce using rule 3


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 5
Number of terminals: 5
Number of non-terminals: 3
Number of states: 12
